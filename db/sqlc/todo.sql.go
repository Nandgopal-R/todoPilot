// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todo.sql

package db

import (
	"context"
)

const addTodo = `-- name: AddTodo :exec
INSERT INTO todoList (
  task
) VALUES ( $1 )
`

func (q *Queries) AddTodo(ctx context.Context, task string) error {
	_, err := q.db.ExecContext(ctx, addTodo, task)
	return err
}

const completeTask = `-- name: CompleteTask :exec
UPDATE todoList
  SET completed = TRUE
  WHERE id = ($1)
`

func (q *Queries) CompleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, completeTask, id)
	return err
}

const getTodos = `-- name: GetTodos :many
SELECT id, task, completed FROM todoList ORDER BY id
`

func (q *Queries) GetTodos(ctx context.Context) ([]Todolist, error) {
	rows, err := q.db.QueryContext(ctx, getTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Todolist
	for rows.Next() {
		var i Todolist
		if err := rows.Scan(&i.ID, &i.Task, &i.Completed); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosById = `-- name: GetTodosById :one
SELECT id, task, completed FROM todoList WHERE id=$1
`

func (q *Queries) GetTodosById(ctx context.Context, id int32) (Todolist, error) {
	row := q.db.QueryRowContext(ctx, getTodosById, id)
	var i Todolist
	err := row.Scan(&i.ID, &i.Task, &i.Completed)
	return i, err
}
